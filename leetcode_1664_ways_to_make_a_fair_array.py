"""
LeetCode 第1664题：生成平衡数组的方案数

题目描述：
给你一个整数数组 nums 。你需要选择 恰好 一个下标（下标从 0 开始）并删除对应的元素。请注意剩下元素的下标可能会因为删除操作而发生改变。

比方说，如果 nums = [6,1,7,4,1] ，那么：
- 选择删除下标 1 ，剩下的数组为 nums = [6,7,4,1] 。
- 选择删除下标 2 ，剩下的数组为 nums = [6,1,4,1] 。
- 选择删除下标 4 ，剩下的数组为 nums = [6,1,7,4] 。

如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 平衡数组 。
请你返回删除一个元素后，剩下的数组是 平衡数组 的 方案数 。

示例：
输入：nums = [2,1,6,4]
输出：1
解释：删除下标 0 ：[1,6,4] -> 偶数元素下标为：1 + 4 = 5 。奇数元素下标为：6 。不平衡。
删除下标 1 ：[2,6,4] -> 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：6 。平衡。
删除下标 2 ：[2,1,4] -> 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：1 。不平衡。
删除下标 3 ：[2,1,6] -> 偶数元素下标为：2 + 6 = 8 。奇数元素下标为：1 。不平衡。
只有一种让剩余数组成为平衡数组的方案。

解题思路：
1. 计算删除每个位置后的奇偶和
2. 使用前缀和优化计算
3. 对于删除位置i，需要重新计算奇偶和
4. 统计满足条件的方案数

时间复杂度：O(n)
空间复杂度：O(1)
"""

class Solution:
    def waysToMakeFair(self, nums: list[int]) -> int:
        """
        计算生成平衡数组的方案数
        
        Args:
            nums: 整数数组
            
        Returns:
            方案数
        """
        n = len(nums)
        count = 0
        
        # 计算原始数组的奇偶和
        even_sum = sum(nums[i] for i in range(0, n, 2))
        odd_sum = sum(nums[i] for i in range(1, n, 2))
        
        # 遍历每个删除位置
        for i in range(n):
            # 删除位置i后的奇偶和
            if i % 2 == 0:  # 删除的是偶数位置
                new_even_sum = even_sum - nums[i]
                new_odd_sum = odd_sum
            else:  # 删除的是奇数位置
                new_even_sum = even_sum
                new_odd_sum = odd_sum - nums[i]
            
            # 检查是否平衡
            if new_even_sum == new_odd_sum:
                count += 1
        
        return count 