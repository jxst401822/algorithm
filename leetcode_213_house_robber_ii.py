"""
LeetCode 第213题：打家劫舍II

题目描述：
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。

示例：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。

解题思路：
1. 由于房屋围成一圈，第一个和最后一个不能同时偷
2. 分两种情况：偷第一个不偷最后一个，或者偷最后一个不偷第一个
3. 对每种情况使用动态规划求解
4. 取两种情况的最大值

时间复杂度：O(n)
空间复杂度：O(1)
"""

class Solution:
    def rob(self, nums: list[int]) -> int:
        """
        计算在不触动警报装置的情况下能偷窃到的最高金额
        
        Args:
            nums: 每个房屋存放的金额数组
            
        Returns:
            能偷窃到的最高金额
        """
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        
        # 偷第一个不偷最后一个
        def rob_range(start, end):
            prev, curr = 0, 0
            for i in range(start, end):
                prev, curr = curr, max(curr, prev + nums[i])
            return curr
        
        # 两种情况取最大值
        return max(rob_range(0, len(nums) - 1), rob_range(1, len(nums))) 